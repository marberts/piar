
R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### R code from vignette source 'making_price_indexes.Rnw'
> 
> ###################################################
> ### code chunk number 1: making_price_indexes.Rnw:29-34
> ###################################################
> library(piar)
> 
> head(ms_prices)
  period business product price
1 202001       B1       1  1.14
2 202001       B1       2    NA
3 202001       B1       3  6.09
4 202001       B2       4  6.23
5 202001       B2       5  8.61
6 202001       B2       6  6.40
> 
> ms_weights
  business classification weight
1       B1             11    553
2       B2             11    646
3       B3             11    312
4       B4             12    622
5       B5             12    330
> 
> 
> ###################################################
> ### code chunk number 2: making_price_indexes.Rnw:39-42
> ###################################################
> relative <- with(ms_prices, price_relative(price, period, product))
> 
> ms_epr <- with(ms_prices, elemental_index(relative, period, business, na.rm = TRUE))
> 
> 
> ###################################################
> ### code chunk number 3: making_price_indexes.Rnw:49-52
> ###################################################
> ms_epr[]
   202001    202002    202003   202004
B1      1 0.8949097 0.3342939      NaN
B2      1       NaN       NaN 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4    NaN       NaN       NaN 4.576286
> ms_epr[, "202004"]
      B1       B2       B3       B4 
     NaN 2.770456 0.537996 4.576286 
> ms_epr["B1", ]
   202001    202002    202003    202004 
1.0000000 0.8949097 0.3342939       NaN 
> 
> 
> ###################################################
> ### code chunk number 4: making_price_indexes.Rnw:57-61
> ###################################################
> pias <- with(
+   ms_weights, 
+   aggregation_structure(c(expand_classification(classification), list(business)), weight)
+ )
> 
> 
> ###################################################
> ### code chunk number 5: making_price_indexes.Rnw:66-68
> ###################################################
> ms_index <- aggregate(ms_epr, pias, na.rm = TRUE)
> ms_index[]
   202001    202002    202003   202004
1       1 1.3007239 1.0630743 2.734761
11      1 1.3007239 1.0630743 1.574515
12      1 1.3007239 1.0630743 4.576286
B1      1 0.8949097 0.3342939 1.574515
B2      1 1.3007239 1.0630743 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.3007239 1.0630743 4.576286
B5      1 1.3007239 1.0630743 4.576286
> 
> 
> ###################################################
> ### code chunk number 6: making_price_indexes.Rnw:75-76
> ###################################################
> as.matrix(ms_index)
   202001    202002    202003   202004
1       1 1.3007239 1.0630743 2.734761
11      1 1.3007239 1.0630743 1.574515
12      1 1.3007239 1.0630743 4.576286
B1      1 0.8949097 0.3342939 1.574515
B2      1 1.3007239 1.0630743 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.3007239 1.0630743 4.576286
B5      1 1.3007239 1.0630743 4.576286
> 
> 
> ###################################################
> ### code chunk number 7: making_price_indexes.Rnw:81-82
> ###################################################
> as.data.frame(ms_index)
   period level     value
1  202001     1 1.0000000
2  202001    11 1.0000000
3  202001    12 1.0000000
4  202001    B1 1.0000000
5  202001    B2 1.0000000
6  202001    B3 1.0000000
7  202001    B4 1.0000000
8  202001    B5 1.0000000
9  202002     1 1.3007239
10 202002    11 1.3007239
11 202002    12 1.3007239
12 202002    B1 0.8949097
13 202002    B2 1.3007239
14 202002    B3 2.0200036
15 202002    B4 1.3007239
16 202002    B5 1.3007239
17 202003     1 1.0630743
18 202003    11 1.0630743
19 202003    12 1.0630743
20 202003    B1 0.3342939
21 202003    B2 1.0630743
22 202003    B3 1.6353355
23 202003    B4 1.0630743
24 202003    B5 1.0630743
25 202004     1 2.7347613
26 202004    11 1.5745154
27 202004    12 4.5762862
28 202004    B1 1.5745154
29 202004    B2 2.7704563
30 202004    B3 0.5379960
31 202004    B4 4.5762862
32 202004    B5 4.5762862
> 
> 
> ###################################################
> ### code chunk number 8: making_price_indexes.Rnw:86-87
> ###################################################
> ms_index$index$`202004`
       1       11       12       B1       B2       B3       B4       B5 
2.734761 1.574515 4.576286 1.574515 2.770456 0.537996 4.576286 4.576286 
> 
> 
> ###################################################
> ### code chunk number 9: making_price_indexes.Rnw:96-97
> ###################################################
> cumprod(ms_index)
   202001    202002    202003    202004
1       1 1.3007239 1.3827662 3.7815355
11      1 1.3007239 1.3827662 2.1771866
12      1 1.3007239 1.3827662 6.3279338
B1      1 0.8949097 0.2991629 0.4710366
B2      1 1.3007239 1.3827662 3.8308934
B3      1 2.0200036 3.3033836 1.7772072
B4      1 1.3007239 1.3827662 6.3279338
B5      1 1.3007239 1.3827662 6.3279338
> 
> 
> ###################################################
> ### code chunk number 10: making_price_indexes.Rnw:101-102
> ###################################################
> apply(as.matrix(ms_index), 1, cumprod)
              1       11       12        B1       B2       B3       B4       B5
202001 1.000000 1.000000 1.000000 1.0000000 1.000000 1.000000 1.000000 1.000000
202002 1.300724 1.300724 1.300724 0.8949097 1.300724 2.020004 1.300724 1.300724
202003 1.382766 1.382766 1.382766 0.2991629 1.382766 3.303384 1.382766 1.382766
202004 3.781536 2.177187 6.327934 0.4710366 3.830893 1.777207 6.327934 6.327934
> 
> 
> ###################################################
> ### code chunk number 11: making_price_indexes.Rnw:110-111
> ###################################################
> (ms_weights <- transform(ms_weights, stratum = c("TS", "TA", "TS", "TS", "TS")))
  business classification weight stratum
1       B1             11    553      TS
2       B2             11    646      TA
3       B3             11    312      TS
4       B4             12    622      TS
5       B5             12    330      TS
> 
> 
> ###################################################
> ### code chunk number 12: making_price_indexes.Rnw:116-117
> ###################################################
> (classification_sps <- with(ms_weights, paste0(classification, stratum)))
[1] "11TS" "11TA" "11TS" "12TS" "12TS"
> 
> 
> ###################################################
> ### code chunk number 13: making_price_indexes.Rnw:122-127
> ###################################################
> (classification_sps <- expand_classification(classification_sps, width = c(1, 1, 2)))
[[1]]
[1] "1" "1" "1" "1" "1"

[[2]]
[1] "11" "11" "11" "12" "12"

[[3]]
[1] "11TS" "11TA" "11TS" "12TS" "12TS"

> pias_sps <- with(
+   ms_weights, 
+   aggregation_structure(c(classification_sps, list(business)), weight)
+ )
> 
> 
> ###################################################
> ### code chunk number 14: making_price_indexes.Rnw:131-132
> ###################################################
> aggregate(ms_epr, pias_sps, na.rm = TRUE)[]
     202001    202002    202003   202004
1         1 1.3007239 1.0630743 2.684412
11        1 1.3007239 1.0630743 1.492443
12        1 1.3007239 1.0630743 4.576286
11TA      1 1.3007239 1.0630743 2.770456
11TS      1 1.3007239 1.0630743 0.537996
12TS      1 1.3007239 1.0630743 4.576286
B1        1 0.8949097 0.3342939 0.537996
B2        1 1.3007239 1.0630743 2.770456
B3        1 2.0200036 1.6353355 0.537996
B4        1 1.3007239 1.0630743 4.576286
B5        1 1.3007239 1.0630743 4.576286
> 
> 
> ###################################################
> ### code chunk number 15: making_price_indexes.Rnw:141-143
> ###################################################
> ms_weights$impute <- c("C1", "C1", "C3", "C4", "C5")
> ms_weights
  business classification weight stratum impute
1       B1             11    553      TS     C1
2       B2             11    646      TA     C1
3       B3             11    312      TS     C3
4       B4             12    622      TS     C4
5       B5             12    330      TS     C5
> 
> 
> ###################################################
> ### code chunk number 16: making_price_indexes.Rnw:148-155
> ###################################################
> pias <- with(
+   ms_weights, 
+   aggregation_structure(c(expand_classification(classification), 
+                           list(impute), 
+                           list(business)), 
+                         weight)
+ )
> 
> 
> ###################################################
> ### code chunk number 17: making_price_indexes.Rnw:159-161
> ###################################################
> ms_index <- aggregate(ms_epr, pias, na.rm = TRUE)
> ms_index[]
   202001    202002    202003   202004
1       1 1.1272256 0.8157123 2.452467
11      1 1.1272256 0.8157123 1.114362
12      1 1.1272256 0.8157123 4.576286
C1      1 0.8949097 0.3342939 2.770456
C3      1 2.0200036 1.6353355 0.537996
C4      1 1.1272256 0.8157123 4.576286
C5      1 1.1272256 0.8157123 4.576286
B1      1 0.8949097 0.3342939 2.770456
B2      1 0.8949097 0.3342939 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.1272256 0.8157123 4.576286
B5      1 1.1272256 0.8157123 4.576286
> 
> 
> ###################################################
> ### code chunk number 18: making_price_indexes.Rnw:168-169
> ###################################################
> with(ms_prices, elemental_index(relative, period, business, na.rm = TRUE, r = 1))[]
   202001     202002    202003   202004
B1      1  0.8949097 0.3342939      NaN
B2      1        NaN       NaN 5.155942
B3      1 23.7480455 2.4900997 0.607197
B4    NaN        NaN       NaN 9.368610
> 
> 
> ###################################################
> ### code chunk number 19: making_price_indexes.Rnw:174-175
> ###################################################
> with(ms_prices, elemental_index(relative, period, business, na.rm = TRUE, r = -1))[]
   202001    202002    202003    202004
B1      1 0.8949097 0.3342939       NaN
B2      1       NaN       NaN 1.7205750
B3      1 0.6591433 0.8185743 0.4746769
B4    NaN       NaN       NaN 2.2353790
> 
> 
> ###################################################
> ### code chunk number 20: making_price_indexes.Rnw:181-182
> ###################################################
> ms_prices_sup <- transform(ms_prices, quantity = 10 - price)
> 
> 
> ###################################################
> ### code chunk number 21: making_price_indexes.Rnw:187-202
> ###################################################
> cols <- c("price", "quantity")
> back_cols <- paste("back", cols, sep = "_")
> ms_prices_sup[back_cols] <- lapply(ms_prices_sup[cols], gpindex::back_price,
+                                    period = ms_prices_sup$period, 
+                                    product = ms_prices_sup$product)
> ms_prices_sup <- na.omit(ms_prices_sup)
> 
> f <- interaction(ms_prices_sup$period, ms_prices_sup$business)
> 
> ms_prices_sup$weight <- with(
+   lapply(ms_prices_sup, split, f),
+   unsplit(Map(gpindex::index_weights("Tornqvist"), 
+               price, back_price, quantity, back_quantity), 
+           f)
+ )
> 
> 
> ###################################################
> ### code chunk number 22: making_price_indexes.Rnw:206-207
> ###################################################
> with(ms_prices_sup, elemental_index(price / back_price, period, business, weight))[]
   202001    202002    202003   202004
B1      1 0.8949097 0.3342939      NaN
B2      1       NaN       NaN 2.165152
B3      1 0.9520982 1.5913929 0.542372
B4    NaN       NaN       NaN 5.904237
> 
> 
> ###################################################
> ### code chunk number 23: making_price_indexes.Rnw:214-215
> ###################################################
> ms_epr <- with(ms_prices, elemental_index(relative, period, business, contrib = TRUE))
> 
> 
> ###################################################
> ### code chunk number 24: making_price_indexes.Rnw:219-222
> ###################################################
> as.matrix(ms_epr, type = "contributions")
      202001      202002     202003      202004
B1.1       0          NA         NA          NA
B1.2      NA          NA -0.6657061          NA
B1.3       0 -0.10509031         NA          NA
B2.4       0          NA         NA -0.06393061
B2.5       0          NA         NA  0.33199180
B2.6       0          NA         NA  1.50239515
B3.7       0  1.43186903 -0.3668053 -0.03401103
B3.8       0  0.05286606  0.3134630 -0.01151654
B3.9       0 -0.22125406  0.2009616 -0.17860957
B3.10      0 -0.24347742  0.4877162 -0.23786686
B4.11     NA          NA         NA  0.15365973
B4.12     NA          NA         NA  3.42262646
> 
> as.data.frame(ms_epr, type = "contributions")
   period level       value
1  202001  B1.1  0.00000000
2  202001  B1.2          NA
3  202001  B1.3  0.00000000
4  202001  B2.4  0.00000000
5  202001  B2.5  0.00000000
6  202001  B2.6  0.00000000
7  202001  B3.7  0.00000000
8  202001  B3.8  0.00000000
9  202001  B3.9  0.00000000
10 202001 B3.10  0.00000000
11 202002  B1.2          NA
12 202002  B1.3 -0.10509031
13 202002  B2.4          NA
14 202002  B2.5          NA
15 202002  B2.6          NA
16 202002  B3.7  1.43186903
17 202002  B3.8  0.05286606
18 202002  B3.9 -0.22125406
19 202002 B3.10 -0.24347742
20 202003  B1.2 -0.66570605
21 202003  B1.3          NA
22 202003  B2.4          NA
23 202003  B2.5          NA
24 202003  B2.6          NA
25 202003  B3.7 -0.36680527
26 202003  B3.8  0.31346297
27 202003  B3.9  0.20096161
28 202003 B3.10  0.48771618
29 202003 B4.11          NA
30 202003 B4.12          NA
31 202004  B1.3          NA
32 202004  B2.4 -0.06393061
33 202004  B2.5  0.33199180
34 202004  B2.6  1.50239515
35 202004  B3.7 -0.03401103
36 202004  B3.8 -0.01151654
37 202004  B3.9 -0.17860957
38 202004 B3.10 -0.23786686
39 202004 B4.11  0.15365973
40 202004 B4.12  3.42262646
> 
> 
> ###################################################
> ### code chunk number 25: making_price_indexes.Rnw:226-227
> ###################################################
> ms_epr$contributions$`202004`$B3
          7           8           9          10 
-0.03401103 -0.01151654 -0.17860957 -0.23786686 
> 
> 
> ###################################################
> ### code chunk number 26: making_price_indexes.Rnw:237-239
> ###################################################
> ms_prices1 <- subset(ms_prices, period <= "202003")
> ms_prices2 <- subset(ms_prices, period >= "202003")
> 
> 
> ###################################################
> ### code chunk number 27: making_price_indexes.Rnw:243-255
> ###################################################
> ms_epr1 <- with(
+   ms_prices1, 
+   elemental_index(price_relative(price, period, product), period, business, na.rm = TRUE)
+ )
> 
> pias1 <- with(
+   ms_weights, 
+   aggregation_structure(c(expand_classification(classification), list(business)), weight)
+ )
> 
> ms_index1 <- aggregate(ms_epr1, pias1, na.rm = TRUE)
> ms_index1[]
   202001    202002    202003
1       1 1.3007239 1.0630743
11      1 1.3007239 1.0630743
12      1 1.3007239 1.0630743
B1      1 0.8949097 0.3342939
B2      1 1.3007239 1.0630743
B3      1 2.0200036 1.6353355
B4      1 1.3007239 1.0630743
B5      1 1.3007239 1.0630743
> 
> 
> ###################################################
> ### code chunk number 28: making_price_indexes.Rnw:260-264
> ###################################################
> ms_epr2 <- with(
+   ms_prices2, 
+   elemental_index(price_relative(price, period, product), period, business, na.rm = TRUE)
+ )
> 
> 
> ###################################################
> ### code chunk number 29: making_price_indexes.Rnw:268-278
> ###################################################
> ms_weights2 <- transform(
+   ms_weights, 
+   weight = gpindex::weights_update(cumprod(ms_index1)[business, "202003"], weight)
+ )
> pias2 <- with(
+   ms_weights2, 
+   aggregation_structure(c(expand_classification(classification), list(business)), weight)
+ )
> ms_index2 <- aggregate(ms_epr2, pias2, na.rm = TRUE)
> ms_index2[]
   202003   202004
1       1 2.734761
11      1 1.574515
12      1 4.576286
B1      1 1.574515
B2      1 2.770456
B3      1 0.537996
B4      1 4.576286
B5      1 4.576286
> 
> 
> ###################################################
> ### code chunk number 30: making_price_indexes.Rnw:282-284
> ###################################################
> (ms_index <- cbind(ms_index1[], ms_index2[, -1, drop = FALSE]))
   202001    202002    202003   202004
1       1 1.3007239 1.0630743 2.734761
11      1 1.3007239 1.0630743 1.574515
12      1 1.3007239 1.0630743 4.576286
B1      1 0.8949097 0.3342939 1.574515
B2      1 1.3007239 1.0630743 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.3007239 1.0630743 4.576286
B5      1 1.3007239 1.0630743 4.576286
> apply(ms_index, 1, cumprod)
              1       11       12        B1       B2       B3       B4       B5
202001 1.000000 1.000000 1.000000 1.0000000 1.000000 1.000000 1.000000 1.000000
202002 1.300724 1.300724 1.300724 0.8949097 1.300724 2.020004 1.300724 1.300724
202003 1.382766 1.382766 1.382766 0.2991629 1.382766 3.303384 1.382766 1.382766
202004 3.781536 2.177187 6.327934 0.4710366 3.830893 1.777207 6.327934 6.327934
> 
> 
> ###################################################
> ### code chunk number 31: making_price_indexes.Rnw:293-298
> ###################################################
> ms_prices$relative <- with(ms_prices, replace(relative, is.na(relative), 1))
> 
> ms_epr <- with(ms_prices, elemental_index(relative, period, business))
> 
> ms_epr[]
   202001    202002    202003   202004
B1      1 0.9459967 0.5781816 1.000000
B2      1 1.0000000 1.0000000 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4    NaN       NaN 1.0000000 4.576286
> 
> 
> ###################################################
> ### code chunk number 32: making_price_indexes.Rnw:302-304
> ###################################################
> ms_index <- aggregate(ms_epr, pias, na.rm = TRUE)
> ms_index[]
   202001    202002    202003   202004
1       1 1.1908519 1.0612826 2.516940
11      1 1.1908519 1.0998935 1.337295
12      1 1.1908519 1.0000000 4.576286
C1      1 0.9750927 0.8112551 2.205855
C3      1 2.0200036 1.6353355 0.537996
C4      1 1.1908519 1.0000000 4.576286
C5      1 1.1908519 1.0000000 4.576286
B1      1 0.9459967 0.5781816 1.000000
B2      1 1.0000000 1.0000000 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.1908519 1.0000000 4.576286
B5      1 1.1908519 1.0000000 4.576286
> 
> 
> ###################################################
> ### code chunk number 33: making_price_indexes.Rnw:313-315
> ###################################################
> ms_prices1 <- subset(ms_prices, business %in% c("B1", "B2", "B3"))
> ms_prices2 <- subset(ms_prices, business == "B4")
> 
> 
> ###################################################
> ### code chunk number 34: making_price_indexes.Rnw:320-330
> ###################################################
> ms_epr1 <- with(
+   ms_prices1, 
+   elemental_index(price_relative(price, period, product), period, business, na.rm = TRUE)
+ )
> ms_epr1[]
   202001    202002    202003   202004
B1      1 0.8949097 0.3342939      NaN
B2      1       NaN       NaN 2.770456
B3      1 2.0200036 1.6353355 0.537996
> ms_epr2 <- with(
+   transform(ms_prices2, period = factor(period, levels = ms_epr1$period)), 
+   elemental_index(price_relative(price, period, product), period, business, na.rm = TRUE)
+ )
> ms_epr2[drop = FALSE]
   202001 202002 202003   202004
B4    NaN    NaN    NaN 4.576286
> 
> 
> ###################################################
> ### code chunk number 35: making_price_indexes.Rnw:334-336
> ###################################################
> ms_epr <- merge(ms_epr1, ms_epr2)
> aggregate(ms_epr, pias, na.rm = TRUE)[]
   202001    202002    202003   202004
1       1 1.1272256 0.8157123 2.452467
11      1 1.1272256 0.8157123 1.114362
12      1 1.1272256 0.8157123 4.576286
C1      1 0.8949097 0.3342939 2.770456
C3      1 2.0200036 1.6353355 0.537996
C4      1 1.1272256 0.8157123 4.576286
C5      1 1.1272256 0.8157123 4.576286
B1      1 0.8949097 0.3342939 2.770456
B2      1 0.8949097 0.3342939 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.1272256 0.8157123 4.576286
B5      1 1.1272256 0.8157123 4.576286
> 
> 
> ###################################################
> ### code chunk number 36: making_price_indexes.Rnw:341-346
> ###################################################
> ms_prices2 <- subset(
+   as.data.frame(aggregate(ms_epr, pias, na.rm = TRUE)),
+   level %in% c("B4", "B5")
+ )
> ms_prices2
   period level     value
11 202001    B4 1.0000000
12 202001    B5 1.0000000
23 202002    B4 1.1272256
24 202002    B5 1.1272256
35 202003    B4 0.8157123
36 202003    B5 0.8157123
47 202004    B4 4.5762862
48 202004    B5 4.5762862
> 
> 
> ###################################################
> ### code chunk number 37: making_price_indexes.Rnw:350-353
> ###################################################
> ms_epr2 <- with(ms_prices2, elemental_index(value, period, level))
> ms_epr <- merge(ms_epr1, ms_epr2)
> aggregate(ms_epr, pias, na.rm = TRUE)[]
   202001    202002    202003   202004
1       1 1.1272256 0.8157123 2.452467
11      1 1.1272256 0.8157123 1.114362
12      1 1.1272256 0.8157123 4.576286
C1      1 0.8949097 0.3342939 2.770456
C3      1 2.0200036 1.6353355 0.537996
C4      1 1.1272256 0.8157123 4.576286
C5      1 1.1272256 0.8157123 4.576286
B1      1 0.8949097 0.3342939 2.770456
B2      1 0.8949097 0.3342939 2.770456
B3      1 2.0200036 1.6353355 0.537996
B4      1 1.1272256 0.8157123 4.576286
B5      1 1.1272256 0.8157123 4.576286
> 
> 
> ###################################################
> ### code chunk number 38: making_price_indexes.Rnw:360-363
> ###################################################
> head(fs_prices)
  period business classification price weight
1 202001       B1            111  5.02    899
2 202001       B2            111    NA    389
3 202001       B3            112  4.85    311
4 202001       B4            112  2.44    160
5 202001       B5            112  7.65    896
6 202001       B6            112  0.74    166
> 
> fs_weights
  classification weight
1            111    300
2            112     27
3            121    310
4            122    742
5            131     35
> 
> 
> ###################################################
> ### code chunk number 39: making_price_indexes.Rnw:368-376
> ###################################################
> fs_prices$relative <- with(fs_prices, price_relative(price, period, business))
> 
> fs_epr <- with(
+   fs_prices, 
+   elemental_index(relative, period, classification, weight, na.rm = TRUE)
+ )
> 
> fs_epr[]
    202001    202002   202003    202004
111      1 0.9840637      NaN       NaN
112      1 0.9358411 0.586219 0.8662806
121      1 0.6122296 2.485335 1.6137244
122      1       NaN      NaN 0.8607865
131      1 0.6111111 1.685065       NaN
> 
> 
> ###################################################
> ### code chunk number 40: making_price_indexes.Rnw:380-387
> ###################################################
> pias <- with(
+   fs_weights, 
+   aggregation_structure(expand_classification(classification), weight)
+ )
> 
> fs_index <- aggregate(fs_epr, pias, na.rm = TRUE)
> fs_index[]
    202001    202002   202003    202004
1        1 0.6972710 1.850654 1.0599312
11       1 0.9800821 0.586219 0.8662806
12       1 0.6122296 2.485335 1.0826599
13       1 0.6111111 1.685065 1.0599312
111      1 0.9840637 0.586219 0.8662806
112      1 0.9358411 0.586219 0.8662806
121      1 0.6122296 2.485335 1.6137244
122      1 0.6122296 2.485335 0.8607865
131      1 0.6111111 1.685065 1.0599312
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.471   0.233   0.460 
